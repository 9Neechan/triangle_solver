<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>ctx_resched (6 samples, 31.58%)</title><rect x="10.0" y="373" width="372.6" height="15.0" fill="rgb(228,155,49)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >ctx_resched</text>
</g>
<g >
<title>exec_binprm (6 samples, 31.58%)</title><rect x="10.0" y="437" width="372.6" height="15.0" fill="rgb(249,192,17)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >exec_binprm</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 10.53%)</title><rect x="817.4" y="341" width="124.2" height="15.0" fill="rgb(241,212,49)" rx="2" ry="2" />
<text  x="820.37" y="351.5" >entry_SYSCALL_6..</text>
</g>
<g >
<title>SolveSpace::System::NewtonSolve (1 samples, 5.26%)</title><rect x="631.1" y="405" width="62.1" height="15.0" fill="rgb(225,54,25)" rx="2" ry="2" />
<text  x="634.05" y="415.5" >SolveS..</text>
</g>
<g >
<title>Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::operator=&lt;Eigen::SparseQR_QProduct&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="213" width="62.1" height="15.0" fill="rgb(214,71,8)" rx="2" ry="2" />
<text  x="634.05" y="223.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;::outerStride (1 samples, 5.26%)</title><rect x="631.1" y="85" width="62.1" height="15.0" fill="rgb(234,92,34)" rx="2" ry="2" />
<text  x="634.05" y="95.5" >Eigen:..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 5.26%)</title><rect x="382.6" y="373" width="62.1" height="15.0" fill="rgb(237,186,43)" rx="2" ry="2" />
<text  x="385.63" y="383.5" >do_use..</text>
</g>
<g >
<title>Slvs_Solve (1 samples, 5.26%)</title><rect x="631.1" y="437" width="62.1" height="15.0" fill="rgb(230,158,23)" rx="2" ry="2" />
<text  x="634.05" y="447.5" >Slvs_S..</text>
</g>
<g >
<title>Eigen::BlockImpl&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, -1, 1, true, Eigen::Dense&gt;::BlockImpl (1 samples, 5.26%)</title><rect x="631.1" y="133" width="62.1" height="15.0" fill="rgb(212,38,28)" rx="2" ry="2" />
<text  x="634.05" y="143.5" >Eigen:..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 5.26%)</title><rect x="382.6" y="341" width="62.1" height="15.0" fill="rgb(231,64,13)" rx="2" ry="2" />
<text  x="385.63" y="351.5" >__hand..</text>
</g>
<g >
<title>bprm_execve (6 samples, 31.58%)</title><rect x="10.0" y="453" width="372.6" height="15.0" fill="rgb(225,160,31)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >bprm_execve</text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::operator=&lt;Eigen::SparseQR_QProduct&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="229" width="62.1" height="15.0" fill="rgb(214,52,36)" rx="2" ry="2" />
<text  x="634.05" y="239.5" >Eigen:..</text>
</g>
<g >
<title>perf_event_exec (6 samples, 31.58%)</title><rect x="10.0" y="389" width="372.6" height="15.0" fill="rgb(228,207,46)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >perf_event_exec</text>
</g>
<g >
<title>dl_new_hash (1 samples, 5.26%)</title><rect x="1003.7" y="373" width="62.1" height="15.0" fill="rgb(215,223,34)" rx="2" ry="2" />
<text  x="1006.68" y="383.5" >dl_new..</text>
</g>
<g >
<title>kernel_fpu_begin_mask (1 samples, 5.26%)</title><rect x="817.4" y="149" width="62.1" height="15.0" fill="rgb(214,98,24)" rx="2" ry="2" />
<text  x="820.37" y="159.5" >kernel..</text>
</g>
<g >
<title>native_write_msr (6 samples, 31.58%)</title><rect x="10.0" y="309" width="372.6" height="15.0" fill="rgb(254,218,1)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >native_write_msr</text>
</g>
<g >
<title>Eigen::ReturnByValue&lt;Eigen::SparseQR_QProduct&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; &gt;::evalTo&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="197" width="62.1" height="15.0" fill="rgb(206,186,26)" rx="2" ry="2" />
<text  x="634.05" y="207.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::internal::CompressedStorage&lt;double, int&gt;::CompressedStorage (1 samples, 5.26%)</title><rect x="506.8" y="357" width="62.1" height="15.0" fill="rgb(242,184,8)" rx="2" ry="2" />
<text  x="509.84" y="367.5" >Eigen:..</text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 5.26%)</title><rect x="941.6" y="245" width="62.1" height="15.0" fill="rgb(210,137,44)" rx="2" ry="2" />
<text  x="944.58" y="255.5" >vm_mma..</text>
</g>
<g >
<title>SolveSpace::System::SolveLeastSquares (1 samples, 5.26%)</title><rect x="444.7" y="405" width="62.1" height="15.0" fill="rgb(245,106,10)" rx="2" ry="2" />
<text  x="447.74" y="415.5" >SolveS..</text>
</g>
<g >
<title>Eigen::Block&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, -1, 1, true&gt;::Block (1 samples, 5.26%)</title><rect x="631.1" y="149" width="62.1" height="15.0" fill="rgb(229,152,11)" rx="2" ry="2" />
<text  x="634.05" y="159.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::EigenBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::rows (1 samples, 5.26%)</title><rect x="631.1" y="37" width="62.1" height="15.0" fill="rgb(254,196,41)" rx="2" ry="2" />
<text  x="634.05" y="47.5" >Eigen:..</text>
</g>
<g >
<title>call_init (1 samples, 5.26%)</title><rect x="382.6" y="469" width="62.1" height="15.0" fill="rgb(217,160,48)" rx="2" ry="2" />
<text  x="385.63" y="479.5" >call_i..</text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::SparseShape, Eigen::DenseShape, 7&gt;::scaleAndAddTo&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="213" width="62.1" height="15.0" fill="rgb(219,153,38)" rx="2" ry="2" />
<text  x="447.74" y="223.5" >Eigen:..</text>
</g>
<g >
<title>__ext4_get_inode_loc (1 samples, 5.26%)</title><rect x="879.5" y="149" width="62.1" height="15.0" fill="rgb(238,120,25)" rx="2" ry="2" />
<text  x="882.47" y="159.5" >__ext4..</text>
</g>
<g >
<title>__ext4_mark_inode_dirty (1 samples, 5.26%)</title><rect x="879.5" y="197" width="62.1" height="15.0" fill="rgb(228,165,19)" rx="2" ry="2" />
<text  x="882.47" y="207.5" >__ext4..</text>
</g>
<g >
<title>ext4_add_nondir (1 samples, 5.26%)</title><rect x="879.5" y="213" width="62.1" height="15.0" fill="rgb(247,45,24)" rx="2" ry="2" />
<text  x="882.47" y="223.5" >ext4_a..</text>
</g>
<g >
<title>_start (10 samples, 52.63%)</title><rect x="444.7" y="517" width="621.1" height="15.0" fill="rgb(221,210,32)" rx="2" ry="2" />
<text  x="447.74" y="527.5" >_start</text>
</g>
<g >
<title>Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;::_solve_impl&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="261" width="62.1" height="15.0" fill="rgb(224,70,10)" rx="2" ry="2" />
<text  x="634.05" y="271.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="341" width="62.1" height="15.0" fill="rgb(242,228,7)" rx="2" ry="2" />
<text  x="447.74" y="351.5" >Eigen:..</text>
</g>
<g >
<title>triangle (13 samples, 68.42%)</title><rect x="382.6" y="533" width="807.4" height="15.0" fill="rgb(227,122,8)" rx="2" ry="2" />
<text  x="385.63" y="543.5" >triangle</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::move (1 samples, 5.26%)</title><rect x="755.3" y="405" width="62.1" height="15.0" fill="rgb(219,73,41)" rx="2" ry="2" />
<text  x="758.26" y="415.5" >std::c..</text>
</g>
<g >
<title>_dl_start (2 samples, 10.53%)</title><rect x="941.6" y="501" width="124.2" height="15.0" fill="rgb(216,183,25)" rx="2" ry="2" />
<text  x="944.58" y="511.5" >_dl_start</text>
</g>
<g >
<title>SolveSpace::System::SolveLinearSystem (1 samples, 5.26%)</title><rect x="631.1" y="373" width="62.1" height="15.0" fill="rgb(253,128,33)" rx="2" ry="2" />
<text  x="634.05" y="383.5" >SolveS..</text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 5.26%)</title><rect x="568.9" y="357" width="62.2" height="15.0" fill="rgb(252,164,42)" rx="2" ry="2" />
<text  x="571.95" y="367.5" >__strl..</text>
</g>
<g >
<title>_dl_map_object_deps (1 samples, 5.26%)</title><rect x="941.6" y="437" width="62.1" height="15.0" fill="rgb(223,27,30)" rx="2" ry="2" />
<text  x="944.58" y="447.5" >_dl_ma..</text>
</g>
<g >
<title>SolveSpace::System::Solve (1 samples, 5.26%)</title><rect x="631.1" y="421" width="62.1" height="15.0" fill="rgb(247,213,37)" rx="2" ry="2" />
<text  x="634.05" y="431.5" >SolveS..</text>
</g>
<g >
<title>do_set_pte (1 samples, 5.26%)</title><rect x="382.6" y="293" width="62.1" height="15.0" fill="rgb(225,187,49)" rx="2" ry="2" />
<text  x="385.63" y="303.5" >do_set..</text>
</g>
<g >
<title>filemap_map_pages (1 samples, 5.26%)</title><rect x="382.6" y="309" width="62.1" height="15.0" fill="rgb(228,83,9)" rx="2" ry="2" />
<text  x="385.63" y="319.5" >filema..</text>
</g>
<g >
<title>vm_munmap (1 samples, 5.26%)</title><rect x="1127.9" y="389" width="62.1" height="15.0" fill="rgb(250,38,8)" rx="2" ry="2" />
<text  x="1130.89" y="399.5" >vm_mun..</text>
</g>
<g >
<title>path_openat (2 samples, 10.53%)</title><rect x="817.4" y="245" width="124.2" height="15.0" fill="rgb(220,175,11)" rx="2" ry="2" />
<text  x="820.37" y="255.5" >path_openat</text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 5.26%)</title><rect x="941.6" y="261" width="62.1" height="15.0" fill="rgb(238,20,24)" rx="2" ry="2" />
<text  x="944.58" y="271.5" >ksys_m..</text>
</g>
<g >
<title>_mi_os_init (1 samples, 5.26%)</title><rect x="382.6" y="437" width="62.1" height="15.0" fill="rgb(214,8,36)" rx="2" ry="2" />
<text  x="385.63" y="447.5" >_mi_os..</text>
</g>
<g >
<title>Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Solve&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="325" width="62.1" height="15.0" fill="rgb(225,25,40)" rx="2" ry="2" />
<text  x="634.05" y="335.5" >Eigen:..</text>
</g>
<g >
<title>_IO_new_file_fopen (2 samples, 10.53%)</title><rect x="817.4" y="389" width="124.2" height="15.0" fill="rgb(245,133,50)" rx="2" ry="2" />
<text  x="820.37" y="399.5" >_IO_new_file_fo..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 5.26%)</title><rect x="941.6" y="309" width="62.1" height="15.0" fill="rgb(217,177,52)" rx="2" ry="2" />
<text  x="944.58" y="319.5" >entry_..</text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::innerSize (1 samples, 5.26%)</title><rect x="631.1" y="69" width="62.1" height="15.0" fill="rgb(234,165,10)" rx="2" ry="2" />
<text  x="634.05" y="79.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::internal::generic_product_impl_base&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::internal::generic_product_impl&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::SparseShape, Eigen::DenseShape, 7&gt; &gt;::scaleAndAddTo&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="229" width="62.1" height="15.0" fill="rgb(238,82,41)" rx="2" ry="2" />
<text  x="447.74" y="239.5" >Eigen:..</text>
</g>
<g >
<title>__mmap64 (1 samples, 5.26%)</title><rect x="941.6" y="325" width="62.1" height="15.0" fill="rgb(250,163,32)" rx="2" ry="2" />
<text  x="944.58" y="335.5" >__mmap64</text>
</g>
<g >
<title>_IO_new_fopen (2 samples, 10.53%)</title><rect x="817.4" y="421" width="124.2" height="15.0" fill="rgb(242,136,2)" rx="2" ry="2" />
<text  x="820.37" y="431.5" >_IO_new_fopen</text>
</g>
<g >
<title>Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;::SparseQR (2 samples, 10.53%)</title><rect x="506.8" y="389" width="124.3" height="15.0" fill="rgb(223,54,6)" rx="2" ry="2" />
<text  x="509.84" y="399.5" >Eigen::SparseQR..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 5.26%)</title><rect x="755.3" y="437" width="62.1" height="15.0" fill="rgb(238,25,32)" rx="2" ry="2" />
<text  x="758.26" y="447.5" >std::_..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 5.26%)</title><rect x="382.6" y="357" width="62.1" height="15.0" fill="rgb(252,188,45)" rx="2" ry="2" />
<text  x="385.63" y="367.5" >handle..</text>
</g>
<g >
<title>__libc_open64 (2 samples, 10.53%)</title><rect x="817.4" y="357" width="124.2" height="15.0" fill="rgb(240,45,0)" rx="2" ry="2" />
<text  x="820.37" y="367.5" >__libc_open64</text>
</g>
<g >
<title>vma_interval_tree_remove (1 samples, 5.26%)</title><rect x="1127.9" y="309" width="62.1" height="15.0" fill="rgb(217,27,14)" rx="2" ry="2" />
<text  x="1130.89" y="319.5" >vma_in..</text>
</g>
<g >
<title>do_mmap (1 samples, 5.26%)</title><rect x="941.6" y="229" width="62.1" height="15.0" fill="rgb(249,140,3)" rx="2" ry="2" />
<text  x="944.58" y="239.5" >do_mmap</text>
</g>
<g >
<title>__fopen_internal (2 samples, 10.53%)</title><rect x="817.4" y="405" width="124.2" height="15.0" fill="rgb(226,153,4)" rx="2" ry="2" />
<text  x="820.37" y="415.5" >__fopen_internal</text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Solve&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (1 samples, 5.26%)</title><rect x="631.1" y="277" width="62.1" height="15.0" fill="rgb(206,36,12)" rx="2" ry="2" />
<text  x="634.05" y="287.5" >Eigen:..</text>
</g>
<g >
<title>load_elf_binary (6 samples, 31.58%)</title><rect x="10.0" y="421" width="372.6" height="15.0" fill="rgb(205,194,31)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >load_elf_binary</text>
</g>
<g >
<title>_dl_map_segments (1 samples, 5.26%)</title><rect x="941.6" y="357" width="62.1" height="15.0" fill="rgb(248,133,5)" rx="2" ry="2" />
<text  x="944.58" y="367.5" >_dl_ma..</text>
</g>
<g >
<title>elf_dynamic_do_Rela (1 samples, 5.26%)</title><rect x="1003.7" y="421" width="62.1" height="15.0" fill="rgb(237,211,8)" rx="2" ry="2" />
<text  x="1006.68" y="431.5" >elf_dy..</text>
</g>
<g >
<title>openaux (1 samples, 5.26%)</title><rect x="941.6" y="405" width="62.1" height="15.0" fill="rgb(222,32,9)" rx="2" ry="2" />
<text  x="944.58" y="415.5" >openaux</text>
</g>
<g >
<title>exec_binprm (2 samples, 10.53%)</title><rect x="1065.8" y="437" width="124.2" height="15.0" fill="rgb(248,22,21)" rx="2" ry="2" />
<text  x="1068.79" y="447.5" >exec_binprm</text>
</g>
<g >
<title>Eigen::internal::generic_product_impl_base&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::internal::generic_product_impl&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::SparseShape, Eigen::DenseShape, 7&gt; &gt;::evalTo&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="245" width="62.1" height="15.0" fill="rgb(226,124,3)" rx="2" ry="2" />
<text  x="447.74" y="255.5" >Eigen:..</text>
</g>
<g >
<title>main (8 samples, 42.11%)</title><rect x="444.7" y="485" width="496.9" height="15.0" fill="rgb(206,104,22)" rx="2" ry="2" />
<text  x="447.74" y="495.5" >main</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 10.53%)</title><rect x="1065.8" y="501" width="124.2" height="15.0" fill="rgb(218,189,24)" rx="2" ry="2" />
<text  x="1068.79" y="511.5" >do_syscall_64</text>
</g>
<g >
<title>SolveSpace::System::CalculateRank (2 samples, 10.53%)</title><rect x="506.8" y="405" width="124.3" height="15.0" fill="rgb(212,101,29)" rx="2" ry="2" />
<text  x="509.84" y="415.5" >SolveSpace::Sys..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (1 samples, 5.26%)</title><rect x="693.2" y="453" width="62.1" height="15.0" fill="rgb(223,33,15)" rx="2" ry="2" />
<text  x="696.16" y="463.5" >std::c..</text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 5.26%)</title><rect x="382.6" y="405" width="62.1" height="15.0" fill="rgb(246,108,50)" rx="2" ry="2" />
<text  x="385.63" y="415.5" >asm_ex..</text>
</g>
<g >
<title>bprm_execve (2 samples, 10.53%)</title><rect x="1065.8" y="453" width="124.2" height="15.0" fill="rgb(245,117,3)" rx="2" ry="2" />
<text  x="1068.79" y="463.5" >bprm_execve</text>
</g>
<g >
<title>Eigen::internal::BlockImpl_dense&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, -1, 1, true, true&gt;::BlockImpl_dense (1 samples, 5.26%)</title><rect x="631.1" y="117" width="62.1" height="15.0" fill="rgb(206,216,28)" rx="2" ry="2" />
<text  x="634.05" y="127.5" >Eigen:..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 5.26%)</title><rect x="382.6" y="389" width="62.1" height="15.0" fill="rgb(232,24,21)" rx="2" ry="2" />
<text  x="385.63" y="399.5" >exc_pa..</text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (6 samples, 31.58%)</title><rect x="10.0" y="325" width="372.6" height="15.0" fill="rgb(232,173,40)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >intel_tfa_pmu_enable_all</text>
</g>
<g >
<title>__vm_munmap (1 samples, 5.26%)</title><rect x="1127.9" y="373" width="62.1" height="15.0" fill="rgb(225,7,40)" rx="2" ry="2" />
<text  x="1130.89" y="383.5" >__vm_m..</text>
</g>
<g >
<title>SolveSpace::System::Solve (3 samples, 15.79%)</title><rect x="444.7" y="437" width="186.4" height="15.0" fill="rgb(245,14,13)" rx="2" ry="2" />
<text  x="447.74" y="447.5" >SolveSpace::System::Solve</text>
</g>
<g >
<title>__split_vma (1 samples, 5.26%)</title><rect x="1127.9" y="341" width="62.1" height="15.0" fill="rgb(242,30,35)" rx="2" ry="2" />
<text  x="1130.89" y="351.5" >__spli..</text>
</g>
<g >
<title>Eigen::internal::sparse_time_dense_product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, double&gt; (1 samples, 5.26%)</title><rect x="444.7" y="197" width="62.1" height="15.0" fill="rgb(210,89,54)" rx="2" ry="2" />
<text  x="447.74" y="207.5" >Eigen:..</text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (2 samples, 10.53%)</title><rect x="817.4" y="437" width="124.2" height="15.0" fill="rgb(206,224,16)" rx="2" ry="2" />
<text  x="820.37" y="447.5" >std::__basic_fi..</text>
</g>
<g >
<title>crypto_shash_update (1 samples, 5.26%)</title><rect x="817.4" y="181" width="62.1" height="15.0" fill="rgb(223,194,49)" rx="2" ry="2" />
<text  x="820.37" y="191.5" >crypto..</text>
</g>
<g >
<title>ext4_create (2 samples, 10.53%)</title><rect x="817.4" y="229" width="124.2" height="15.0" fill="rgb(243,92,35)" rx="2" ry="2" />
<text  x="820.37" y="239.5" >ext4_create</text>
</g>
<g >
<title>elf_map (1 samples, 5.26%)</title><rect x="1127.9" y="405" width="62.1" height="15.0" fill="rgb(239,185,11)" rx="2" ry="2" />
<text  x="1130.89" y="415.5" >elf_map</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 5.26%)</title><rect x="755.3" y="389" width="62.1" height="15.0" fill="rgb(207,82,50)" rx="2" ry="2" />
<text  x="758.26" y="399.5" >__memm..</text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::coeff (1 samples, 5.26%)</title><rect x="444.7" y="149" width="62.1" height="15.0" fill="rgb(240,51,50)" rx="2" ry="2" />
<text  x="447.74" y="159.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::internal::BlockImpl_dense&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, -1, 1, true, true&gt;::init (1 samples, 5.26%)</title><rect x="631.1" y="101" width="62.1" height="15.0" fill="rgb(240,58,13)" rx="2" ry="2" />
<text  x="634.05" y="111.5" >Eigen:..</text>
</g>
<g >
<title>_dl_map_object_from_fd (1 samples, 5.26%)</title><rect x="941.6" y="373" width="62.1" height="15.0" fill="rgb(207,171,20)" rx="2" ry="2" />
<text  x="944.58" y="383.5" >_dl_ma..</text>
</g>
<g >
<title>perf_pmu_enable.part.0 (6 samples, 31.58%)</title><rect x="10.0" y="357" width="372.6" height="15.0" fill="rgb(245,171,12)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >perf_pmu_enable.part.0</text>
</g>
<g >
<title>perf-exec (6 samples, 31.58%)</title><rect x="10.0" y="533" width="372.6" height="15.0" fill="rgb(239,3,5)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >perf-exec</text>
</g>
<g >
<title>do_fault (1 samples, 5.26%)</title><rect x="382.6" y="325" width="62.1" height="15.0" fill="rgb(207,94,15)" rx="2" ry="2" />
<text  x="385.63" y="335.5" >do_fault</text>
</g>
<g >
<title>Eigen::SparseQR_QProduct&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::evalTo&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="181" width="62.1" height="15.0" fill="rgb(242,213,6)" rx="2" ry="2" />
<text  x="634.05" y="191.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;::operator=&lt;Eigen::SparseQR_QProduct&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="245" width="62.1" height="15.0" fill="rgb(239,36,43)" rx="2" ry="2" />
<text  x="634.05" y="255.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::internal::sparse_time_dense_product_impl&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, double, 1, true&gt;::processRow (1 samples, 5.26%)</title><rect x="444.7" y="165" width="62.1" height="15.0" fill="rgb(243,43,42)" rx="2" ry="2" />
<text  x="447.74" y="175.5" >Eigen:..</text>
</g>
<g >
<title>std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;::open (2 samples, 10.53%)</title><rect x="817.4" y="469" width="124.2" height="15.0" fill="rgb(219,134,15)" rx="2" ry="2" />
<text  x="820.37" y="479.5" >std::basic_ofst..</text>
</g>
<g >
<title>__x64_sys_execve (2 samples, 10.53%)</title><rect x="1065.8" y="485" width="124.2" height="15.0" fill="rgb(218,139,20)" rx="2" ry="2" />
<text  x="1068.79" y="495.5" >__x64_sys_execve</text>
</g>
<g >
<title>do_sys_openat2 (2 samples, 10.53%)</title><rect x="817.4" y="277" width="124.2" height="15.0" fill="rgb(223,163,0)" rx="2" ry="2" />
<text  x="820.37" y="287.5" >do_sys_openat2</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 5.26%)</title><rect x="568.9" y="373" width="62.2" height="15.0" fill="rgb(228,51,24)" rx="2" ry="2" />
<text  x="571.95" y="383.5" >std::_..</text>
</g>
<g >
<title>begin_new_exec (1 samples, 5.26%)</title><rect x="1065.8" y="405" width="62.1" height="15.0" fill="rgb(218,107,13)" rx="2" ry="2" />
<text  x="1068.79" y="415.5" >begin_..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (1 samples, 5.26%)</title><rect x="1003.7" y="389" width="62.1" height="15.0" fill="rgb(254,161,7)" rx="2" ry="2" />
<text  x="1006.68" y="399.5" >_dl_lo..</text>
</g>
<g >
<title>do_sys_open (2 samples, 10.53%)</title><rect x="817.4" y="293" width="124.2" height="15.0" fill="rgb(242,96,37)" rx="2" ry="2" />
<text  x="820.37" y="303.5" >do_sys_open</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 10.53%)</title><rect x="1065.8" y="517" width="124.2" height="15.0" fill="rgb(252,58,23)" rx="2" ry="2" />
<text  x="1068.79" y="527.5" >entry_SYSCALL_6..</text>
</g>
<g >
<title>Slvs_Solve (3 samples, 15.79%)</title><rect x="444.7" y="453" width="186.4" height="15.0" fill="rgb(252,158,36)" rx="2" ry="2" />
<text  x="447.74" y="463.5" >Slvs_Solve</text>
</g>
<g >
<title>Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="357" width="62.1" height="15.0" fill="rgb(238,225,51)" rx="2" ry="2" />
<text  x="447.74" y="367.5" >Eigen:..</text>
</g>
<g >
<title>elf_machine_rela (1 samples, 5.26%)</title><rect x="1003.7" y="405" width="62.1" height="15.0" fill="rgb(243,94,40)" rx="2" ry="2" />
<text  x="1006.68" y="415.5" >elf_ma..</text>
</g>
<g >
<title>call_init (1 samples, 5.26%)</title><rect x="382.6" y="485" width="62.1" height="15.0" fill="rgb(212,34,53)" rx="2" ry="2" />
<text  x="385.63" y="495.5" >call_i..</text>
</g>
<g >
<title>__libc_start_main (8 samples, 42.11%)</title><rect x="444.7" y="501" width="496.9" height="15.0" fill="rgb(244,99,4)" rx="2" ry="2" />
<text  x="447.74" y="511.5" >__libc_start_main</text>
</g>
<g >
<title>__mmap64 (1 samples, 5.26%)</title><rect x="941.6" y="341" width="62.1" height="15.0" fill="rgb(240,118,11)" rx="2" ry="2" />
<text  x="944.58" y="351.5" >__mmap64</text>
</g>
<g >
<title>SolveSpace::System::SolveLeastSquares (1 samples, 5.26%)</title><rect x="631.1" y="389" width="62.1" height="15.0" fill="rgb(231,29,24)" rx="2" ry="2" />
<text  x="634.05" y="399.5" >SolveS..</text>
</g>
<g >
<title>_dl_catch_exception (1 samples, 5.26%)</title><rect x="941.6" y="421" width="62.1" height="15.0" fill="rgb(248,169,6)" rx="2" ry="2" />
<text  x="944.58" y="431.5" >_dl_ca..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (1 samples, 5.26%)</title><rect x="693.2" y="469" width="62.1" height="15.0" fill="rgb(214,4,38)" rx="2" ry="2" />
<text  x="696.16" y="479.5" >std::_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 31.58%)</title><rect x="10.0" y="517" width="372.6" height="15.0" fill="rgb(252,220,47)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (2 samples, 10.53%)</title><rect x="817.4" y="453" width="124.2" height="15.0" fill="rgb(217,137,44)" rx="2" ry="2" />
<text  x="820.37" y="463.5" >std::basic_file..</text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt;, Eigen::internal::assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (1 samples, 5.26%)</title><rect x="444.7" y="261" width="62.1" height="15.0" fill="rgb(250,167,6)" rx="2" ry="2" />
<text  x="447.74" y="271.5" >Eigen:..</text>
</g>
<g >
<title>dl_main (2 samples, 10.53%)</title><rect x="941.6" y="453" width="124.2" height="15.0" fill="rgb(224,100,16)" rx="2" ry="2" />
<text  x="944.58" y="463.5" >dl_main</text>
</g>
<g >
<title>mmap_region (1 samples, 5.26%)</title><rect x="941.6" y="213" width="62.1" height="15.0" fill="rgb(214,76,39)" rx="2" ry="2" />
<text  x="944.58" y="223.5" >mmap_r..</text>
</g>
<g >
<title>ext4_get_inode_loc (1 samples, 5.26%)</title><rect x="879.5" y="165" width="62.1" height="15.0" fill="rgb(244,42,41)" rx="2" ry="2" />
<text  x="882.47" y="175.5" >ext4_g..</text>
</g>
<g >
<title>Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="277" width="62.1" height="15.0" fill="rgb(206,85,2)" rx="2" ry="2" />
<text  x="447.74" y="287.5" >Eigen:..</text>
</g>
<g >
<title>load_elf_binary (2 samples, 10.53%)</title><rect x="1065.8" y="421" width="124.2" height="15.0" fill="rgb(247,2,9)" rx="2" ry="2" />
<text  x="1068.79" y="431.5" >load_elf_binary</text>
</g>
<g >
<title>_dl_relocate_object (1 samples, 5.26%)</title><rect x="1003.7" y="437" width="62.1" height="15.0" fill="rgb(237,172,6)" rx="2" ry="2" />
<text  x="1006.68" y="447.5" >_dl_re..</text>
</g>
<g >
<title>Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Solve&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="293" width="62.1" height="15.0" fill="rgb(233,125,2)" rx="2" ry="2" />
<text  x="634.05" y="303.5" >Eigen:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::replace (1 samples, 5.26%)</title><rect x="755.3" y="453" width="62.1" height="15.0" fill="rgb(231,108,5)" rx="2" ry="2" />
<text  x="758.26" y="463.5" >std::_..</text>
</g>
<g >
<title>do_syscall_64 (6 samples, 31.58%)</title><rect x="10.0" y="501" width="372.6" height="15.0" fill="rgb(214,170,38)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >do_syscall_64</text>
</g>
<g >
<title>begin_new_exec (6 samples, 31.58%)</title><rect x="10.0" y="405" width="372.6" height="15.0" fill="rgb(249,207,12)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >begin_new_exec</text>
</g>
<g >
<title>__vma_adjust (1 samples, 5.26%)</title><rect x="1127.9" y="325" width="62.1" height="15.0" fill="rgb(227,15,44)" rx="2" ry="2" />
<text  x="1130.89" y="335.5" >__vma_..</text>
</g>
<g >
<title>__ext4_new_inode (1 samples, 5.26%)</title><rect x="817.4" y="213" width="62.1" height="15.0" fill="rgb(213,147,52)" rx="2" ry="2" />
<text  x="820.37" y="223.5" >__ext4..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::replace (1 samples, 5.26%)</title><rect x="755.3" y="469" width="62.1" height="15.0" fill="rgb(205,70,10)" rx="2" ry="2" />
<text  x="758.26" y="479.5" >std::_..</text>
</g>
<g >
<title>SolveSpace::System::TestRank (2 samples, 10.53%)</title><rect x="506.8" y="421" width="124.3" height="15.0" fill="rgb(223,125,54)" rx="2" ry="2" />
<text  x="509.84" y="431.5" >SolveSpace::Sys..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (2 samples, 10.53%)</title><rect x="1065.8" y="469" width="124.2" height="15.0" fill="rgb(214,157,34)" rx="2" ry="2" />
<text  x="1068.79" y="479.5" >do_execveat_com..</text>
</g>
<g >
<title>__x64_sys_execve (6 samples, 31.58%)</title><rect x="10.0" y="485" width="372.6" height="15.0" fill="rgb(206,134,35)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >__x64_sys_execve</text>
</g>
<g >
<title>Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;::Matrix&lt;Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="325" width="62.1" height="15.0" fill="rgb(229,45,21)" rx="2" ry="2" />
<text  x="447.74" y="335.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::col (1 samples, 5.26%)</title><rect x="631.1" y="165" width="62.1" height="15.0" fill="rgb(230,5,47)" rx="2" ry="2" />
<text  x="634.05" y="175.5" >Eigen:..</text>
</g>
<g >
<title>mi_process_init (1 samples, 5.26%)</title><rect x="382.6" y="453" width="62.1" height="15.0" fill="rgb(249,121,53)" rx="2" ry="2" />
<text  x="385.63" y="463.5" >mi_pro..</text>
</g>
<g >
<title>cap_vm_enough_memory (1 samples, 5.26%)</title><rect x="941.6" y="197" width="62.1" height="15.0" fill="rgb(221,131,11)" rx="2" ry="2" />
<text  x="944.58" y="207.5" >cap_vm..</text>
</g>
<g >
<title>__GI__IO_file_open (2 samples, 10.53%)</title><rect x="817.4" y="373" width="124.2" height="15.0" fill="rgb(238,136,38)" rx="2" ry="2" />
<text  x="820.37" y="383.5" >__GI__IO_file_o..</text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::_init1&lt;Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="309" width="62.1" height="15.0" fill="rgb(219,67,1)" rx="2" ry="2" />
<text  x="447.74" y="319.5" >Eigen:..</text>
</g>
<g >
<title>__do_munmap (1 samples, 5.26%)</title><rect x="1127.9" y="357" width="62.1" height="15.0" fill="rgb(219,155,51)" rx="2" ry="2" />
<text  x="1130.89" y="367.5" >__do_m..</text>
</g>
<g >
<title>copy_fpregs_to_fpstate (1 samples, 5.26%)</title><rect x="817.4" y="133" width="62.1" height="15.0" fill="rgb(240,77,42)" rx="2" ry="2" />
<text  x="820.37" y="143.5" >copy_f..</text>
</g>
<g >
<title>finish (1 samples, 5.26%)</title><rect x="631.1" y="453" width="62.1" height="15.0" fill="rgb(226,176,44)" rx="2" ry="2" />
<text  x="634.05" y="463.5" >finish</text>
</g>
<g >
<title>do_filp_open (2 samples, 10.53%)</title><rect x="817.4" y="261" width="124.2" height="15.0" fill="rgb(222,111,46)" rx="2" ry="2" />
<text  x="820.37" y="271.5" >do_filp_open</text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::_set&lt;Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="373" width="62.1" height="15.0" fill="rgb(220,176,31)" rx="2" ry="2" />
<text  x="447.74" y="383.5" >Eigen:..</text>
</g>
<g >
<title>solve3 (4 samples, 21.05%)</title><rect x="444.7" y="469" width="248.5" height="15.0" fill="rgb(215,59,23)" rx="2" ry="2" />
<text  x="447.74" y="479.5" >solve3</text>
</g>
<g >
<title>all (19 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(246,32,48)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>Eigen::EigenBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::size (1 samples, 5.26%)</title><rect x="631.1" y="53" width="62.1" height="15.0" fill="rgb(243,29,9)" rx="2" ry="2" />
<text  x="634.05" y="63.5" >Eigen:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_move (1 samples, 5.26%)</title><rect x="755.3" y="421" width="62.1" height="15.0" fill="rgb(217,146,31)" rx="2" ry="2" />
<text  x="758.26" y="431.5" >std::_..</text>
</g>
<g >
<title>_dl_map_object (1 samples, 5.26%)</title><rect x="941.6" y="389" width="62.1" height="15.0" fill="rgb(250,2,4)" rx="2" ry="2" />
<text  x="944.58" y="399.5" >_dl_ma..</text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 5.26%)</title><rect x="941.6" y="277" width="62.1" height="15.0" fill="rgb(236,107,10)" rx="2" ry="2" />
<text  x="944.58" y="287.5" >__x64_..</text>
</g>
<g >
<title>Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Solve&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="309" width="62.1" height="15.0" fill="rgb(223,23,44)" rx="2" ry="2" />
<text  x="634.05" y="319.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::SparseMatrix&lt;double, 0, int&gt;::SparseMatrix (1 samples, 5.26%)</title><rect x="506.8" y="373" width="62.1" height="15.0" fill="rgb(238,206,31)" rx="2" ry="2" />
<text  x="509.84" y="383.5" >Eigen:..</text>
</g>
<g >
<title>crc32c_pcl_intel_update (1 samples, 5.26%)</title><rect x="817.4" y="165" width="62.1" height="15.0" fill="rgb(207,78,30)" rx="2" ry="2" />
<text  x="820.37" y="175.5" >crc32c..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 5.26%)</title><rect x="941.6" y="293" width="62.1" height="15.0" fill="rgb(213,201,18)" rx="2" ry="2" />
<text  x="944.58" y="303.5" >do_sys..</text>
</g>
<g >
<title>ext4_inode_bitmap_csum_set (1 samples, 5.26%)</title><rect x="817.4" y="197" width="62.1" height="15.0" fill="rgb(216,158,24)" rx="2" ry="2" />
<text  x="820.37" y="207.5" >ext4_i..</text>
</g>
<g >
<title>Eigen::internal::sparse_time_dense_product_impl&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, double, 1, true&gt;::run (1 samples, 5.26%)</title><rect x="444.7" y="181" width="62.1" height="15.0" fill="rgb(247,19,25)" rx="2" ry="2" />
<text  x="447.74" y="191.5" >Eigen:..</text>
</g>
<g >
<title>Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;::operator=&lt;Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="389" width="62.1" height="15.0" fill="rgb(209,71,51)" rx="2" ry="2" />
<text  x="447.74" y="399.5" >Eigen:..</text>
</g>
<g >
<title>__GI___sysconf (1 samples, 5.26%)</title><rect x="382.6" y="421" width="62.1" height="15.0" fill="rgb(242,152,40)" rx="2" ry="2" />
<text  x="385.63" y="431.5" >__GI__..</text>
</g>
<g >
<title>_dl_sysdep_start (2 samples, 10.53%)</title><rect x="941.6" y="469" width="124.2" height="15.0" fill="rgb(208,127,7)" rx="2" ry="2" />
<text  x="944.58" y="479.5" >_dl_sysdep_start</text>
</g>
<g >
<title>__x64_sys_openat (2 samples, 10.53%)</title><rect x="817.4" y="309" width="124.2" height="15.0" fill="rgb(242,207,8)" rx="2" ry="2" />
<text  x="820.37" y="319.5" >__x64_sys_openat</text>
</g>
<g >
<title>Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;::operator=&lt;Eigen::Solve&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="357" width="62.1" height="15.0" fill="rgb(232,68,35)" rx="2" ry="2" />
<text  x="634.05" y="367.5" >Eigen:..</text>
</g>
<g >
<title>SolveSpace::System::NewtonSolve (1 samples, 5.26%)</title><rect x="444.7" y="421" width="62.1" height="15.0" fill="rgb(219,42,32)" rx="2" ry="2" />
<text  x="447.74" y="431.5" >SolveS..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 10.53%)</title><rect x="817.4" y="325" width="124.2" height="15.0" fill="rgb(253,186,6)" rx="2" ry="2" />
<text  x="820.37" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>_dl_start_final (2 samples, 10.53%)</title><rect x="941.6" y="485" width="124.2" height="15.0" fill="rgb(224,185,35)" rx="2" ry="2" />
<text  x="944.58" y="495.5" >_dl_start_final</text>
</g>
<g >
<title>ext4_reserve_inode_write (1 samples, 5.26%)</title><rect x="879.5" y="181" width="62.1" height="15.0" fill="rgb(216,185,33)" rx="2" ry="2" />
<text  x="882.47" y="191.5" >ext4_r..</text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::_set&lt;Eigen::Solve&lt;Eigen::SparseQR&lt;Eigen::SparseMatrix&lt;double, 0, int&gt;, Eigen::COLAMDOrdering&lt;int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt; &gt; (1 samples, 5.26%)</title><rect x="631.1" y="341" width="62.1" height="15.0" fill="rgb(219,37,0)" rx="2" ry="2" />
<text  x="634.05" y="351.5" >Eigen:..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (6 samples, 31.58%)</title><rect x="10.0" y="469" width="372.6" height="15.0" fill="rgb(217,36,5)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >do_execveat_common.isra.0</text>
</g>
<g >
<title>x86_pmu_enable (6 samples, 31.58%)</title><rect x="10.0" y="341" width="372.6" height="15.0" fill="rgb(247,171,28)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >x86_pmu_enable</text>
</g>
<g >
<title>_dl_init (1 samples, 5.26%)</title><rect x="382.6" y="501" width="62.1" height="15.0" fill="rgb(235,76,51)" rx="2" ry="2" />
<text  x="385.63" y="511.5" >_dl_init</text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; &gt;::_set_noalias&lt;Eigen::Product&lt;Eigen::Transpose&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; &gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, 0&gt; &gt; (1 samples, 5.26%)</title><rect x="444.7" y="293" width="62.1" height="15.0" fill="rgb(228,4,33)" rx="2" ry="2" />
<text  x="447.74" y="303.5" >Eigen:..</text>
</g>
<g >
<title>_dl_start_user (1 samples, 5.26%)</title><rect x="382.6" y="517" width="62.1" height="15.0" fill="rgb(247,217,36)" rx="2" ry="2" />
<text  x="385.63" y="527.5" >_dl_st..</text>
</g>
</g>
</svg>
